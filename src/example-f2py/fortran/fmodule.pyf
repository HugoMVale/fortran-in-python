!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module fortranmodule ! in 
    interface  ! in :fortranmodule
        module fmodule ! in :fortranmodule:fmodule.f90
            integer, private,parameter,optional :: sp=real32
            integer, private,parameter,optional :: dp=real64
            subroutine intsum(a,b,res) ! in :fortranmodule:fmodule.f90:fmodule
                integer intent(in) :: a
                integer intent(in) :: b
                integer intent(out) :: res
            end subroutine intsum
            subroutine real4sum(a,b,res) ! in :fortranmodule:fmodule.f90:fmodule
                real(kind=real32) intent(in) :: a
                real(kind=real32) intent(in) :: b
                real(kind=real32) intent(out) :: res
            end subroutine real4sum
            subroutine real8sum(a,b,res) ! in :fortranmodule:fmodule.f90:fmodule
                real(kind=real64) intent(in) :: a
                real(kind=real64) intent(in) :: b
                real(kind=real64) intent(out) :: res
            end subroutine real8sum
            subroutine vector4sum(n,a,b,res) ! in :fortranmodule:fmodule.f90:fmodule
                integer, optional,intent(in),check(shape(a, 0) == n),depend(a) :: n=shape(a, 0)
                real(kind=sp) dimension(n),intent(in) :: a
                real(kind=sp) dimension(n),intent(in),depend(n) :: b
                real(kind=sp) dimension(n),intent(out),depend(n) :: res
            end subroutine vector4sum
            subroutine matrix8sum(n,m,a,b,res) ! in :fortranmodule:fmodule.f90:fmodule
                integer, optional,intent(in),check(shape(a, 0) == n),depend(a) :: n=shape(a, 0)
                integer, optional,intent(in),check(shape(a, 1) == m),depend(a) :: m=shape(a, 1)
                real(kind=dp) dimension(n,m),intent(in) :: a
                real(kind=dp) dimension(n,m),intent(in),depend(n,m) :: b
                real(kind=dp) dimension(n,m),intent(out),depend(n,m) :: res
            end subroutine matrix8sum
            subroutine matrixtimesvector(n,m,a,b,res) ! in :fortranmodule:fmodule.f90:fmodule
                integer, optional,intent(in),check(shape(a, 0) == n),depend(a) :: n=shape(a, 0)
                integer, optional,intent(in),check(shape(a, 1) == m),depend(a) :: m=shape(a, 1)
                real(kind=real64) dimension(n,m),intent(in) :: a
                real(kind=real64) dimension(m),intent(in),depend(m) :: b
                real(kind=real64) dimension(n),intent(out),depend(n) :: res
            end subroutine matrixtimesvector
            subroutine saxpy(n,a,x,y) ! in :fortranmodule:fmodule.f90:fmodule
                integer, optional,intent(in),check(shape(x, 0) == n),depend(x) :: n=shape(x, 0)
                real(kind=real64) :: a
                real(kind=real64) dimension(n),intent(in) :: x
                real(kind=real64) dimension(n),intent(inout),depend(n) :: y
            end subroutine saxpy
            subroutine averagefnc(fnc,a,b,res) ! in :fortranmodule:fmodule.f90:fmodule
                external fnc
                real(kind=dp) intent(in) :: a
                real(kind=dp) intent(in) :: b
                real(kind=dp) intent(out) :: res
                interface  ! in :fortranmodule:fmodule.f90:fmodule:averagefnc
                    function fnc(x) ! in :fortranmodule:fmodule.f90:fmodule:averagefnc:unknown_interface
                        real(kind=dp) intent(in) :: x
                        real(kind=dp) :: fnc
                    end function fnc
                end interface 
            end subroutine averagefnc
            subroutine applyfnctomatrix(fnc,n,m,a,res) ! in :fortranmodule:fmodule.f90:fmodule
                external fnc
                integer, optional,intent(in),check(shape(a, 0) == n),depend(a) :: n=shape(a, 0)
                integer, optional,intent(in),check(shape(a, 1) == m),depend(a) :: m=shape(a, 1)
                real(kind=dp) dimension(n,m),intent(in) :: a
                real(kind=dp) dimension(n,m),intent(out),depend(n,m) :: res
                interface  ! in :fortranmodule:fmodule.f90:fmodule:applyfnctomatrix
                    subroutine fnc(s,x,u) ! in :fortranmodule:fmodule.f90:fmodule:applyfnctomatrix:unknown_interface
                        integer, optional,intent(in),check(shape(x, 0) == s),depend(x) :: s=shape(x, 0)
                        real(kind=dp) dimension(s),intent(in) :: x
                        real(kind=dp) dimension(s),intent(out),depend(s) :: u
                    end subroutine fnc
                end interface 
            end subroutine applyfnctomatrix
        end module fmodule
    end interface 
end python module fortranmodule

! This file was auto-generated with f2py (version:1.24.3).
! See:
! https://web.archive.org/web/20140822061353/http://cens.ioc.ee/projects/f2py2e
