!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module fortranmodule ! in 
    interface  ! in :fortranmodule
        module mathtools ! in :fortranmodule:mathtools.f90
            integer, private,parameter,optional :: dp=real64
            subroutine vectorproduct(n,a,b,res) ! in :fortranmodule:mathtools.f90:mathtools
                integer, optional,intent(in),check(shape(a, 0) == n),depend(a) :: n=shape(a, 0)
                real(kind=dp) dimension(n),intent(in) :: a
                real(kind=dp) dimension(n),intent(in),depend(n) :: b
                real(kind=dp) dimension(n),intent(out),depend(n) :: res
            end subroutine vectorproduct
            subroutine vectorsum(n,a,b,res) ! in :fortranmodule:mathtools.f90:mathtools
                integer, optional,intent(in),check(shape(a, 0) == n),depend(a) :: n=shape(a, 0)
                real(kind=real32) dimension(n),intent(in) :: a
                real(kind=real32) dimension(n),intent(in),depend(n) :: b
                real(kind=real32) dimension(n),intent(out),depend(n) :: res
            end subroutine vectorsum
            subroutine saxpy(n,a,x,y) ! in :fortranmodule:mathtools.f90:mathtools
                integer, optional,intent(in),check(shape(x, 0) == n),depend(x) :: n=shape(x, 0)
                real(kind=real64) :: a
                real(kind=real64) dimension(n),intent(in) :: x
                real(kind=real64) dimension(n),intent(inout),depend(n) :: y
            end subroutine saxpy
            subroutine matrixpartialsum(n,m,a,res) ! in :fortranmodule:mathtools.f90:mathtools
                integer, optional,intent(in),check(shape(a, 0) == n),depend(a) :: n=shape(a, 0)
                integer, optional,intent(in),check(shape(a, 1) == m),depend(a) :: m=shape(a, 1)
                real(kind=real64) dimension(n,m),intent(in) :: a
                real(kind=real64) dimension(n,m),intent(out),depend(n,m) :: res
            end subroutine matrixpartialsum
            function intproduct(a,b) result (res) ! in :fortranmodule:mathtools.f90:mathtools
                integer intent(in) :: a
                integer intent(in) :: b
                real :: res
            end function intproduct
            function intproduct2(a,b) ! in :fortranmodule:mathtools.f90:mathtools
                integer intent(in) :: a
                integer intent(in) :: b
                integer :: intproduct2
            end function intproduct2
        end module mathtools
    end interface 
end python module fortranmodule

! This file was auto-generated with f2py (version:1.23.5).
! See:
! https://web.archive.org/web/20140822061353/http://cens.ioc.ee/projects/f2py2e
